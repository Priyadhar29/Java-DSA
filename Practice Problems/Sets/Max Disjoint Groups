Problem
You are given an array consisting of N integers. Your task is to determine the maximum number of disjoint subarrays (referred to as "groups") that can be formed, where each group contains at least one repeating element. A disjoint group is a contiguous subarray, and no element can belong to more than one group.

A group is defined as a contiguous subarray that contains at least one element that appears more than once within that subarray.
Disjoint groups cannot overlap. This means that each element of the array can be part of only one group.
The goal is to find the maximum number of such disjoint groups in the array.
Input Format
The first line contains a single integer N, the number of elements in the array.

The second line contains N space-separated integers, the elements of the array.

Output Format
Output a single integer representing the maximum number of disjoint groups that can be formed, where each group contains at least one repeating element.

Explanation:
Input:

10

1 2 3 2 1 4 5 6 5 4

Output:

2

First group: The subarray [1, 2, 3, 2] has a repeating element 2, so this is considered a valid group.

Second group: The subarray [4, 5, 6, 5] has a repeating element 5, so this forms another valid group.

The remaining elements [4] do not form a valid group as there are no repeating elements.

Therefore, the maximum number of disjoint groups is 2.

Sample Inputs & Outputs
Sample Input 1

7
1 2 3 2 4 5 4
Sample Output 1

2
Sample Input 2

10
1 2 3 4 5 6 7 8 9 10
Sample Output 2

0
Constraints
1 ≤ N ≤ 10,000 -10^9 ≤ Array elements ≤ 10^9

Code:

import java.util.*;

public class Main {

  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int n = scanner.nextInt();
    int[] arr = new int[n];
    for (int i = 0; i < n; i++) {
      arr[i] = scanner.nextInt();
    }
  
    HashSet<Integer> set = new HashSet<Integer>();
    int groups = 0;
    boolean hasRepeat = false;
    for (int i = 0; i < n; i++) {
      if (set.contains(arr[i])) {
        hasRepeat = true;
      }
      set.add(arr[i]);
      if (hasRepeat) {
        groups++;
        set.clear();
        hasRepeat = false;
      }
    }
    System.out.println(groups);
  }
}
