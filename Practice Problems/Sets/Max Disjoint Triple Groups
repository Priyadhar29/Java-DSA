Problem
Write a program that reads an array of N integers and calculates the maximum number of disjoint groups that can be formed.

Input Format
The first line contains a single integer N, the number of elements in the array. The second line contains N space-separated integers, the elements of the array.

Output Format
Print a single integer, the maximum number of disjoint groups with at least one element repeating three times that can be formed from the array.

Sample Inputs & Outputs
Sample Input 1

10
1 2 2 2 3 4 4 4 4 5
Sample Output 1

2
Sample Input 2

7
1 2 3 3 4 3 5
Sample Output 2

1
Constraints
1 ≤ N ≤ 10,000
-10^9 ≤ Array elements ≤ 10^9

Code:

import java.util.*;

public class Main {

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] arr = new int[n];
        
        // Read the elements of the array
        for (int i = 0; i < n; i++) {
            arr[i] = scanner.nextInt();
        }
        
        // Count occurrences of each integer
        HashMap<Integer, Integer> countMap = new HashMap<>();
        for (int num : arr) {
            countMap.put(num, countMap.getOrDefault(num, 0) + 1);
        }
        
        // Calculate the maximum number of disjoint groups
        int groups = 0;
        int availableGroups = 0;
        
        // Count how many groups can be formed
        for (int count : countMap.values()) {
            if (count >= 3) {
                availableGroups += count / 3; // Each group requires 3 of the same element
            }
        }
        
        // The maximum number of disjoint groups is the number of available groups
        groups = availableGroups;
        
        // Print the result
        System.out.println(groups);
        
        scanner.close();
    }
}
