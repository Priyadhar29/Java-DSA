Problem
Develop a program that takes an array of N integer values as input and identifies the element that has occurred the most number of times.

Input Format
The first line contains a single integer N, representing the number of elements in the array. The second line contains N space-separated integers, detailing the elements of the array.

Output Format
Print a single integer representing the most frequently occurring element in the array. If there is a tie in frequency, print the element that appeared last among them.

Sample Inputs & Outputs
Sample Input 1

7
1 2 3 2 4 3 5
Sample Output 1

3
Sample Input 2

10
4 5 9 11 9 4 8 15 8 6
Sample Output 2

8
Constraints
1 ≤ N ≤ 10,000 -10^9 ≤ Array elements ≤ 10^9

Code:

import java.util.LinkedHashMap;
import java.util.Map.Entry;
import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] arr = new int[n];
        for (int i = 0; i < n; i++) {
            arr[i] = sc.nextInt();
        }
        lastFrequentElement(arr);
    }

    public static void lastFrequentElement(int[] arr) {
        LinkedHashMap<Integer, Integer> map = new LinkedHashMap<>();
        for (int i = 0; i < arr.length; i++) {
            map.put(arr[i], map.getOrDefault(arr[i], 0) + 1);
        }

        int lastFrequentElement = -1;
        int maxFrequency = 0;

        for (Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getValue() >= maxFrequency) {
                maxFrequency = entry.getValue();
                lastFrequentElement = entry.getKey();
            }
        }

        System.out.print(lastFrequentElement);
    }
}
