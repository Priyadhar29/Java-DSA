Problem
Write a program that takes an array of integers as input and prints all the integers that occur an odd number of times, sorted in ascending order.

Input Format
The first line contains a single integer N, the number of elements in the array. The second line contains N space-separated integers, the elements of the array.

Output Format
Print the integers that occur an odd number of times in the array, sorted in ascending order, each on a new line. If a number occurs multiple odd times, it should be printed only once, if no odd times repeating elements print “No Repeating Elements”

Sample Inputs & Outputs
Sample Input 1

8
4 3 4 4 5 5 3 2
Sample Output 1

2
4
Sample Input 2

5
10 7 10 7 9
Sample Output 2

9
Constraints
1 ≤ N ≤ 10,000 -10^9 ≤ Array elements ≤ 10^9

Code:

import java.util.TreeMap;
import java.util.Map;
import java.util.Scanner;

public class OddOccFrequency {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        
        // Read the size of the array
        int N = scanner.nextInt();
        int[] arr = new int[N];
        
        // Read the elements of the array
        for (int i = 0; i < N; i++) {
            arr[i] = scanner.nextInt();
        }
        
        printOddOccFrequency(arr);
    
    }

    public static void printOddOccFrequency(int[] arr) {
        TreeMap<Integer, Integer> frequencyMap = new TreeMap<>();
        
        // Count the frequency of each element
        for (int num : arr) {
            frequencyMap.put(num, frequencyMap.getOrDefault(num, 0) + 1);
        }
        
        boolean found = false;
        
        // Print odd numbers that occur an odd number of times
        for (Map.Entry<Integer, Integer> entry : frequencyMap.entrySet()) {
            int num = entry.getKey();
            int count = entry.getValue();
            if (count % 2 != 0 && count != 2) {
                System.out.println(num);
                found = true;
            }
        }
        
        if (!found) {
            System.out.println("No Repeating Elements");
        }
    }
}
