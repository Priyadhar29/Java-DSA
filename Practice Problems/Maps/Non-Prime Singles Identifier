Problem
Create a program that reads an array of integers and prints all the non-prime numbers that occur exactly once.

Input Format
The first line contains a single integer N, the number of elements in the array. The second line contains N space-separated integers, the elements of the array.

Output Format
Print the non-prime numbers that occur exactly once in the array, each on a new line. If a non-prime number is unique, it should be printed in the order it first appears.

Sample Inputs & Outputs
Sample Input 1

8
4 6 7 4 8 9 10 11
Sample Output 1

6
8
9
10
Sample Input 2

5
22 15 13 19 15
Sample Output 2

22
Constraints
1 ≤ N ≤ 10,000 1 ≤ Array elements ≤ 10^6

Code:

import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Scanner;

public class UniqueNonPrime {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        
        // Read the size of the array
        int N = scanner.nextInt();
        int[] arr = new int[N];
        
        // Read the elements of the array
        for (int i = 0; i < N; i++) {
            arr[i] = scanner.nextInt();
        }
        
        printUniqueNonPrimes(arr);
        
        scanner.close();
    }

    public static void printUniqueNonPrimes(int[] arr) {
        LinkedHashMap<Integer, Integer> frequencyMap = new LinkedHashMap<>();
        
        // Count the frequency of each element
        for (int num : arr) {
            frequencyMap.put(num, frequencyMap.getOrDefault(num, 0) + 1);
        }
        
        // Print non-prime numbers that occur exactly once
        for (Map.Entry<Integer, Integer> entry : frequencyMap.entrySet()) {
            int num = entry.getKey();
            int count = entry.getValue();
            if (count == 1 && isNonPrime(num)) {
                System.out.println(num);
            }
        }
    }

    public static boolean isNonPrime(int num) {
        if (num <= 1) {
            return true; // 0 and 1 are considered non-prime
        }
        for (int i = 2; i <= Math.sqrt(num); i++) {
            if (num % i == 0) {
                return true; // Found a divisor, hence it's non-prime
            }
        }
        return false; // It's a prime number
    }
}
