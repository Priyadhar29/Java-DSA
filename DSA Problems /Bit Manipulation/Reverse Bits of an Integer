Problem
Reverse the bits of a given 32-bit unsigned integer.

Input Format
- An integer n (0 â‰¤ n â‰¤ 2^32 - 1).

Output Format
- The integer obtained by reversing the bits of n.

Sample Inputs & Outputs
Sample Input 1
43261596

Sample Output 1
964176192

Constraints
- 0 â‰¤ n â‰¤ 2^32 - 1

Code:
import java.util.Scanner;

public class ReverseBits {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        long n = scanner.nextLong();  // Use long to accept 32-bit unsigned range

        long result = reverseBits(n);
        System.out.println(result);
    }

    public static long reverseBits(long n) {
        long reversed = 0;

        for (int i = 0; i < 32; i++) {
            long lastBit = n & 1;        // Get last bit
            reversed = (reversed << 1) | lastBit; // Shift left and add bit
            n = n >> 1;                  // Shift n right
        }

        return reversed;
    }
}

ðŸ§  How the Code Works
Step-by-step:

Loop 32 times (for 32 bits).

Extract the last bit using n & 1.

Shift the reversed number left by 1 to make space for the new bit.

Add the extracted bit to reversed using OR |.

Right shift the input number n by 1.

Continue until all 32 bits are processed.

âœ… Breakdown of rev = (rev << 1) | (n & 1);
ðŸ§© n & 1 â†’ Get the rightmost bit
This isolates the last (least significant) bit of n.

Bitwise AND with 1 means:

If n ends in 1 â†’ result is 1

If n ends in 0 â†’ result is 0

Examples:
n = 1001 (binary) â†’ n & 1 = 1
n = 1000 (binary) â†’ n & 1 = 0

ðŸ§© rev << 1 â†’ Shift rev left by 1
This makes space to add the new bit at the end (just like multiplying by 2).

You're moving existing bits one position to the left.

Example:
rev = 00000000000000000000000000000101
rev << 1 = 00000000000000000000000000001010

ðŸ§© | â†’ Add the extracted bit
Use bitwise OR to set the last bit in rev based on the last bit from n.

Example:
rev << 1 = 00000010
n & 1     = 00000001
OR        = 00000011
So the bit from n gets placed into the new rightmost position of rev.

ðŸ§® Full Step Example (n = 9)
n = 00000000000000000000000000001001

Iteration 1:
n & 1 â†’ 1

rev = 0 â†’ rev << 1 = 0, then | 1 = 1

Iteration 2:
n >> 1 â†’ 000...100

n & 1 = 0

rev = 1 << 1 = 2, then | 0 = 2

Iteration 3:
n >> 1 = 000...10

n & 1 = 0

rev = 2 << 1 = 4, then | 0 = 4

Iteration 4:
n >> 1 = 000...1

n & 1 = 1

rev = 4 << 1 = 8, then | 1 = 9

And so on...

ðŸ§ª Sample Execution:
Input: 43261596
Binary:      00000010100101000001111010011100
Reversed:    00111001011110000010100101000000
Decimal:     964176192

âœ… Output:
964176192
