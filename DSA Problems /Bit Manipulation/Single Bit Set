Problem
Determine if a given integer n has exactly one bit set in its binary representation, which means n is a power of two. The task is to check if n meets this condition.

Input Format
An integer n (0 ≤ n ≤ 10^9).

Output Format
A boolean indicating whether n has exactly one bit set.

Sample Inputs & Outputs
Sample Input 1

16
Sample Output 1

true
Constraints
0 ≤ n ≤ 10^9

Code:
import java.util.Scanner;

public class PowerOfTwoCheck {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();

        boolean isPowerOfTwo = (n > 0) && ((n & (n - 1)) == 0);
        System.out.println(isPowerOfTwo);
    }
}

💡 What Happens in (n & (n - 1))?
If n is a power of two:

n - 1 will have all the bits flipped after the 1.

Example: n = 16 (which is 10000)
n        = 10000
n - 1    = 01111
n & (n-1)= 00000  → equals 0
That’s why:
(n & (n - 1)) == 0   → means `n` has only one bit set → power of two

❌ If n is NOT a power of 2:
Example: n = 18 (10010)

n        = 10010
n - 1    = 10001
n & (n-1)= 10000     → not zero → not a power of two

🧠 Final Truth Table:
| `n` | `n > 0` | `n & (n-1)` | isPowerOfTwo |
| --- | ------- | ----------- | ------------ |
| 0   | false   | -           | false        |
| 1   | true    | 0           | true         |
| 2   | true    | 0           | true         |
| 3   | true    | 2           | false        |
| 4   | true    | 0           | true         |
| 5   | true    | 4           | false        |
| 8   | true    | 0           | true         |
| 9   | true    | 8           | false        |
