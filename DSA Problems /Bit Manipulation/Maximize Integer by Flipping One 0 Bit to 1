🧠 Objective:
You are given an integer n.
You can flip exactly one 0 bit to 1 in its binary representation.
Find the maximum value you can get after flipping one and only one bit.

📥 Input Format:
A single integer n

📤 Output Format:
Print the maximum possible integer after flipping one 0 to 1

🔢 Sample Input & Output:
Sample Input 1:
29
Binary of 29: 11101

Flipping the only 0 → 11111 → Decimal = 31

✅ Sample Output:
31
Sample Input 2:
15
Binary of 15: 1111

All bits are already 1, no 0 to flip

So output is same: 15

💡 Approach:
Step-by-step:
Loop through each bit position (from 0 to 31).

For each bit that is 0:

Flip it to 1 using bitwise OR.

Calculate new value and track the maximum.

If all bits are already 1, the result is n.

💻 Java Code:
import java.util.Scanner;

public class MaxValueAfterOneBitFlip {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        System.out.print(findMaximum(n));
    }
    public static int findMaximum(int n) {
        int xor = 1;
        while (xor <= n) {
            if ((n & xor) == 0) {
                return n | xor;
            }
            xor <<= 1;
        }
        return n;
    }
}

🔁 Step-by-Step:
🔹 int xor = 1;
Start with the bitmask 000...0001 → used to check each bit from least significant bit (LSB).

🔄 while (xor <= n)
Loop while the bitmask is less than or equal to n.

This ensures we only check valid bit positions present in n.

✅ if ((n & xor) == 0)
This checks if the current bit is 0 in n:

(n & xor) isolates the current bit.

If result is 0, that means this bit in n is not set.

💡 return n | xor;
If we found a bit that is 0, flip it to 1 using bitwise OR.

n | xor sets that bit to 1.

👉 xor <<= 1;
If the current bit was already 1, shift xor left by one (*2) to move to the next bit.

🧪 Example:
Input: n = 29
Binary: 0001 1101

Start with xor = 1 (bit 0):

29 & 1 = 1 → bit already set ✅ move on.

xor = 2 (bit 1):

29 & 2 = 0 → bit is not set

Flip it: 29 | 2 = 31

Output: 31

⚠️ Edge Case:
If all bits are already set (e.g., n = 15 → 1111), no 0 bit will be found:

The loop will end and return n unchanged.

✅ Summary:
 | Line                  | Purpose                                   |                    |
| --------------------- | ----------------------------------------- | ------------------ |
| `xor = 1`             | Bitmask starting from LSB                 |                    |
| `while (xor <= n)`    | Check all positions up to the size of `n` |                    |
| `if ((n & xor) == 0)` | Is the current bit `0`?                   |                    |
| \`return n            | xor;\`                                    | Flip that bit to 1 |
| `xor <<= 1;`          | Move to next bit                          |                    |
| `return n;`           | If no `0` found, return original number   |                    |

